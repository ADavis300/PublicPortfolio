#include <iostream>
#include <cmath>

using namespace std;

bool isLongEnough(string newPW){
    if(newPW.length()<8){
        return false;
    }
    else{
        return true;
    }
}

bool containsUpper(string newPW){

    char PWArr[newPW.length()];

    for(int i = 0; i < sizeof(PWArr); i++){
            
        PWArr[i] = newPW[i];
        
        if(isupper(newPW[i])){
            return true;
        }

    }
    return false;
}

bool containsLower(string newPW){

    char PWArr[newPW.length()];

    for(int i = 0; i < sizeof(PWArr); i++){
            
        PWArr[i] = newPW[i];
        
        if(islower(newPW[i])){
            return true;
        }

    }
    return false;
}

bool containsSpecial(string newPW){

    char PWArr[newPW.length()];

    for(int i = 0; i < sizeof(PWArr); i++){
            
        PWArr[i] = newPW[i];
        
        if(isalpha(newPW[i]) == 0 && isdigit(newPW[i]) == 0){
            return true;
        }

    }
    return false;
}

bool contains2Digits(string newPW){

    char PWArr[newPW.length()];

    for(int i = 0; i < sizeof(PWArr); i++){
            
        PWArr[i] = newPW[i];
        
        if(isdigit(newPW[i])){
            for(i = i+1; i < sizeof(PWArr); i++){
                if(isdigit(newPW[i])){
                    return true;
                }
            }
        }

    }
    return false;
}

string newPassword(){
    string newPW;

    cout << endl << "Please enter a new password" << endl;
    cin >> newPW;

    while(isLongEnough(newPW) == false || containsUpper(newPW) == false || containsLower(newPW) == false || containsSpecial(newPW) == false || contains2Digits(newPW) == false){
        cout << endl << "Try Again. Password must be 8 characters or longer, contain upper and lowercase characters," << endl << "contain at least 1 special character, and contain at least 2 numbers" << endl;
        cin >> newPW;
        
    }

    return newPW;
}

string confirmPassword(){
    string confPW;
    cout << endl << "Please confirm password" << endl;
    cin >> confPW;

    return confPW;
}

int main(){
    
    string newPW, confPW;

    newPW = newPassword();
    confPW = confirmPassword();
    
    while(confPW != newPW){
        cout << endl << "That is incorrect ";
        confPW = confirmPassword();
    }
    
    if(confPW == newPW){
        cout << endl << "Great! :)" << endl;
    }
    
}
